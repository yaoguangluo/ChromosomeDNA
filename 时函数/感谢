序言中介绍了推导公式的符号定义和主要方程，以及方程在快速傅立叶中的噪音过滤真实应用源码。使用和阅读起来比较简爽直观。
而方程的推导计算过程我会陆陆续续的在这里贴出来。在这之前，我要感谢下面的知识面。
1 数据结构
在计算机的意识形态与人的思维模式中通用的结构， 这些结构可以设计成稳定的变量和类模型，用于数学和哲学上的精确计算和归纳描述。

2 离散数学
根据真实的问题进行文字描述出精确的图模型，然后进行逻辑和数学方程解析。

3 工程数学
微分，积分，导数的降维思想一直是计算领域的经典。

4 微分拓扑学
离散的图模型在空间上用工程数学计算发散，越细微则越精确，

5 微分几何
图的向量和力用几何模型表达分解，可以转化为角度，cos， sin， 复变分解。

6 高中代数
上面的基础。

7 工学物理学
力，能，波属于物理学范畴，沉淀了许多公式集合。

8 算法导论
计算机的源码优化离不开算法逻辑的优化。

9 数字逻辑
离散数学的基础。

10 模拟电子
调试与观测 真实环境的验证。

在2019年，我设计华瑞集和养疗经的时候发现这一个我写的关于声音的这个滤波技术，当时我觉得噪音呢，应该是属于健康领域的
，然后是基于滤波的技术的时候呢，用到了很久以前关于这个库里图基的这个快速傅立叶算法，我将快速傅里叶算法和离散余弦散发，
然后应用在过滤的这个噪音过滤系统上，然后就发现了很多很多问题，首先那是他的频率不准确。所以在著作权作品中一直没有做成
可直接运行的应用接口。为什么频率不准确是因为离散余弦和快速傅立叶都是通过一个2的一个K派进行叠加。展开举个简单的例子，
我将一段语音的录入，这个语音，他属于一个时序的一个波段。 我在采用一个准确的波特率，将这个波段进行小波分解。 分解后的这些波段集合呢，
我们将采用离散余弦和快速傅里叶算法进行频率的变换。 而这一个频率的集合是含有多种噪音成分，他不能准确的描述录制的声音中
含有的真实噪音。 为了确定这一个噪音的真实性，区分意思是这个噪音呢？是属于录制声音的原音中的噪音，还是在算法解析的时候产生
的算法噪，我比较惊奇的，发现是时函数，可以很好的应用在这一个领域。

通过算法我可以发现 快速傅立叶算法计算频率集合会产生 波包噪，倍频噪，低频动态噪音，叠加噪音，高斯噪音等非原音中噪音。
而原音中本身也有 高斯噪，低频噪，我迫切需要一种滤波技术来抵抗这些强干扰噪音。我想到了量子数学。于是第一次系统的应用。受益匪浅。
收获颇丰。而这些最大的价值不是时函数公式的数学方程解析，而是我发现了时间有噪音。

时间如果真的有噪音，那么就直接确定了时间属于能量，属于一种基础物质。
关于这个论点，我目前有76页数学推导过程，这个过程得到的解析式方程目前已经用在了快速傅立叶的振幅能级变换中具体如下，效果惊人。展示出极强滤波能力。


for (int j = 0; j < input.length; j++) {
            output[j] =  math.fabs(1/1024 + out[j].b * out[j].cpi - 2 * out[j].ca * out[j].cb * out[j].b * out[j].cpi);
        }

for (int j = 0; j < n / 2; j++) {
            double kcc = c * cc - s * ss;
            double kss = s * cc + c * ss;
            double kii = i * cc - c * ii;
            cc = kcc;
            ss = kss;
            ii = kii;
            lcc[j] = cc;
            lss[j] = ss;
            lii[j] = ii;
        }

for (int j = 0; j < n / 2; j++) {
            c = lcc[j];
            s = lss[j];
            i = lii[j];
            double ccc = a[j].a;
            double sss = a[j].b;
            double iii = a[j].cpi;
            double kss = s * ccc + c * sss;
            double kcc = c * ccc - s * sss;
            double kii = i * ccc - c * iii;
            output[j].a = ab[j].a + kcc;
            output[j].ca = ab[j].ca + ccc ;
            output[j].cb = ab[j].cb + c;

            output[j].b = ab[j].b + kss;
            output[j].cpi = ab[j].cpi + kii;
            output[j].sa = ab[j].sa + sss;
            output[j].sb = ab[j].sb + s;

            output[j + n / 2].a = abc[j].a - kcc;
            output[j + n / 2].ca = abc[j].ca - ccc;
            output[j + n / 2].cb = abc[j].cb - c;

            output[j + n / 2].b = abc[j].b - kss;
            output[j + n / 2].cpi = abc[j].cpi - kii;
            output[j + n / 2].sa = abc[j].sa - sss;
            output[j + n / 2].sb = abc[j].sb - s;
        }

更新中。。

关于76页公式推导，我想开源，但是2019年的德塔图灵分词，2020年的肽展公式，2022年的dna元基催化与肽计算 开源教训 告诉我，
我开源必定会产生新一波的被社会骚扰。我是个普通人，不是笼子里的猩猩。于是

|tero(x)> + |tcol(x)> =  deta (t1-t0) * m(t）/ deta1(t1 - t0) * p(t) = 1  （感谢这个母公式） 

上面的源码片段是我的deta (t1 - t0) * m(t）/ deta1(t1 - t0) 求导应用在真实的环境。
很好的解释了能量在时间与空间上的表达关系，刚好傅立叶变换也是这个关系。可以通用，如下。
fi = cosAcosB * (cosAcosB - 1) + sinAsinB
fio= 1/ (2 * sqrt(i)) * { sin(A + B)sin(A - B) - 2 * sin(A + B)sin(A - B) * cosAcosB } 

我仅仅替换了原来的 根号（a * a + b * b）输出。效果惊人。展示出极强滤波能力。
最近很多人，包括父母都在刺激我，说我又搞什么鬼，我一直在思考。

1 时间如果有噪音，这个噪音与一些癌症是否有关联。养疗经可以应用。
2 噪音如果展开，我有了一些方法。
3 76页推导过程不应改展开。。。变嘧啶，时函数。。是不是有人在调侃我。
4 我的动机仅仅是瞬间转移，没有想到，我得到了这么多东西。





--------------------------------------------------------------------------------------             
罗瑶光/Yaoguang.Luo          
yaoguangluo@outlook.com-313699483@qq.com-2080315360@qq.com-lygtin@sina.com     
15116110525-19173129338-16674208794           
430181198505250014-G24402609-EB0581342       
204925063-389418686-F2406501-0626136         
湖南省 长沙市 浏阳市区 集里街道 神仙坳社区 大塘冲路 一段 208 阳光家园别墅小区 第10栋别墅        
--------------------------------------------------------------------------------------  
