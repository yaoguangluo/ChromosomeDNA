//重写了个简单的基于ID的合并 已调试成功例子
获取表名:中医诊断:进行选择;
条件为:和:笔记|包含|发热:笔记|包含|身重;
获取表列名:ID:病症;
操作:0|行至|2;

获取表名:中医诊断:进行选择;
条件为:和:笔记|包含|发热:笔记|包含|身重;
获取表列名:ID:病症;
操作:0|行至|5;

PLETL:中节点|进行表格合并|主码为|ID|模式为|新增列; 
操作:病症|进行分词|词性显色;
操作:ID|进行数字排序|从小到大;操作:ID|颜色标记为|红色;
//

package OSM.shell;
import java.io.IOException;
import java.math.BigDecimal;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import ME.APM.VSQ.HRJFrame;
import MSV.OSQ.sets.DetaDouble;
import OEU.LYG4DQS4D.LYG10DWCMSSort13D_XCDX_C_A_S;
import OEU.LYG4DQS4D.LYG9DWithDoubleTopSort4D;
import OEU.LYG4DQS4D.Quick_7D_luoyaoguang_Sort;
import OSI.AOP.PCS.PP.port_E.RestNLPPortImpl;
import OSI.OSU.SI.ASQ.OSD.AVI.AEI.ACI.ASI.OVI.OEI.OCI.OSI.PVI.PEI.PCI.PSI.tinShell.TinMap;
import PEQ.AMV.ECS.test.ANNTest;
import PEQ.AMV.ECS.test.DNNTest;
import PEQ.AMV.ECS.test.SensingTest;
import PEU.P.table.TableSorterZYNK;
import SVQ.stable.StableShellETL;
@SuppressWarnings({"unused"})
//稍后将DMA文件与内存操作替换成 jtable表内存操作 罗瑶光
//pletl 先实现 上中下的 tinmap中指令合并
//设计了简答宾语补足语，有时间思考下 定语和slang 的模式 和成语模式 罗瑶光
//作者罗瑶光
public class P_AO_PLETL {
	@SuppressWarnings({"unchecked"})
	public static void P_PletlLimitMap(String[] sets, List<Map<String, Object>> output, Map<String, Object> object) 
			throws InstantiationException, IllegalAccessException, IOException {
		List<Map<String, Object>> outputTemp= new ArrayList<>();
		//中节点|表格合并|主码|新增列|ID|。。
		//上节点是main节点作为accumulator，模拟rna芯片计算容器，中下节点模拟神经元记忆接口。
		//设计宾语补足语 今天改为如下 20211011 罗瑶光
		//PLETL:中节点|进行表格合并|主码为|ID|模式为|新增列;
		//PLETL:中节点|进行表格合并|主码为|ID|模式为|叠加列;
		//PLETL:中节点|进行表格合并|主码为|ID|模式为|有交集叠加列;
		//PLETL:中节点|进行表格合并|主码为|ID|模式为|有交集新增列;
		//PLETL:中节点|进行表格合并|主码为|ID|模式为|无交集新增列;
//		if(sets[1].equalsIgnoreCase("进行表格合并")) {
//			TinMap mapShell= null;
//			String 列标识 = null;
//			if(sets[0].equalsIgnoreCase("中节点")) {
//				mapShell= (TinMap)object.get(StableShellETL.SHELL_ETL_MID_SHELL);
//				列标识= "m_";
//			}
//			if(sets[0].equalsIgnoreCase("下节点")) {
//				mapShell= (TinMap)object.get(StableShellETL.SHELL_ETL_DOWN_SHELL);
//				列标识= "d_";
//			}
//
//			//将上面进行内外循环 颠倒rotation 如下
//			if(sets[2].equalsIgnoreCase("主码为")) {//先单一primary key， 之后再设计 forenge key 和 combination key
//				//To do。。。初始
//				Map<String, String> keyTemp= new HashMap<>(); 
//				Map<String, Object> tinShellETL= (Map<String, Object>)mapShell.get(StableShellETL.SHELL_ETL_TIN_SHELL_ETL);
//				List<Map<String, Object>> rowList= (List<Map<String, Object>>)tinShellETL.get("obj");
//				//主循环
//				List<Map<String, Object>> 主要输入轮训= (List<Map<String, Object>>)object.get("obj");
//				Iterator<Map<String, Object>> outputTempIterator= 主要输入轮训.iterator();
//				while(outputTempIterator.hasNext()) {
//					Map<String, Object> rowOutputTempIterator= outputTempIterator.next();
//					Map<String, Object> rowValueRowOutputTempIterator
//					= (Map<String, Object>)rowOutputTempIterator.get(StableShellETL.SHELL_ETL_ROWVALUE);
//					if(0!= rowList.size()) {
//						//辅循环
//						Iterator<Map<String, Object>> iterator= rowList.iterator();
//						Here:
//							while(iterator.hasNext()) {//非主要输入轮训
//								Map<String, Object> row= iterator.next();
//								Map<String, Object> rowValue= (Map<String, Object>)row.get(StableShellETL.SHELL_ETL_ROWVALUE);
//								Map<String, Object> culumnValue= (Map<String, Object>)rowValue.get(sets[3]);
//								//outputTemp
//								if(rowValueRowOutputTempIterator.containsKey(sets[3])) {
//									Map<String, Object> rowValueRowOutputTempIteratorCulumnValue
//									= (Map<String, Object>)rowValueRowOutputTempIterator.get(sets[3]);
//									//合并rowValueRowOutputTempIteratorCulumnValue 与 culumnValue
//									//合并方式，1 叠加列合并 2 新增列合并
//									//先实现简单的 新增列合并
//									//在执行前进行sets[3]相等检查
//									if(rowValueRowOutputTempIteratorCulumnValue.get("culumnValue")
//											.equals(culumnValue.get("culumnValue"))) {
//										if(sets[4].equalsIgnoreCase("模式为")) {
//											model(sets, rowValue, 列标识, rowValueRowOutputTempIterator);
//										}	
//									}else {
//										//这里不相等就直接合并进来。上面是相等的就考虑合并模式处理
//										//按新增列合并进来
//										//因为是做笛卡尔乘积的数据库join
//										//所以只有2个1表 就只出两个结果母语是这里 要筛选没有相等的id 又没有出现的行也合并进来
////										if(!keyTemp.containsKey(culumnValue.get("culumnValue").toString())) {
////											keyTemp.put(culumnValue.get("culumnValue").toString(), "");
////											model(sets, rowValue, 列标识, rowValueRowOutputTempIterator);//因为全部录进来，所以合并不要轻易用。
////											//rowOutputTempIterator.put(StableShellETL.SHELL_ETL_ROWVALUE, rowValueRowOutputTempIterator);	
////										}
//									}
//									//其他定状补语 函数 
//									//。。。
//									//。。。
//									//。			
//								}
//								rowOutputTempIterator.put(StableShellETL.SHELL_ETL_ROWVALUE, rowValueRowOutputTempIterator);
//								//outputTemp.add(rowOutputTempIterator);
//							}
//					}
//					outputTemp.add(rowOutputTempIterator);
//				}
//			}
//			//			if(sets[2].equalsIgnoreCase("自由定义各种命令。。")) {
//			//			//To do。。。 
//			//		}
//			output.clear();
//			output.addAll(outputTemp);
//		}
		if(sets[1].equalsIgnoreCase("进行表格合并")) {
			TinMap mapShell= null;
			String 列标识 = null;
			if(sets[0].equalsIgnoreCase("中节点")) {
				mapShell= (TinMap)object.get(StableShellETL.SHELL_ETL_MID_SHELL);
				列标识= "m_";
			}
			if(sets[0].equalsIgnoreCase("下节点")) {
				mapShell= (TinMap)object.get(StableShellETL.SHELL_ETL_DOWN_SHELL);
				列标识= "d_";
			}

			//将上面进行内外循环 颠倒rotation 如下
			if(sets[2].equalsIgnoreCase("主码为")) {//先单一primary key， 之后再设计 forenge key 和 combination key
				//To do。。。初始
				Map<String, String> keyTemp= new HashMap<>(); 
				Map<String, Object> tinShellETL= (Map<String, Object>)mapShell.get(StableShellETL.SHELL_ETL_TIN_SHELL_ETL);
				List<Map<String, Object>> rowList= (List<Map<String, Object>>)tinShellETL.get("obj");
				//主循环
				List<Map<String, Object>> 主要输入轮训= (List<Map<String, Object>>)object.get("obj");
				Iterator<Map<String, Object>> outputTempIterator= 主要输入轮训.iterator();
				while(outputTempIterator.hasNext()) {
					Map<String, Object> rowOutputTempIterator= outputTempIterator.next();
					Map<String, Object> rowValueRowOutputTempIterator
					= (Map<String, Object>)rowOutputTempIterator.get(StableShellETL.SHELL_ETL_ROWVALUE);
					if(rowValueRowOutputTempIterator.containsKey(sets[3])) {
						Map<String, Object> rowValueRowOutputTempIteratorCulumnValue
						= (Map<String, Object>)rowValueRowOutputTempIterator.get(sets[3]);
						if(!keyTemp.containsKey(rowValueRowOutputTempIteratorCulumnValue.get("culumnValue").toString())) {
							keyTemp.put(rowValueRowOutputTempIteratorCulumnValue.get("culumnValue").toString(), "");
							outputTemp.add(rowOutputTempIterator);
						}	
					}
				}
				if(0!= rowList.size()) {
					//辅循环
					Iterator<Map<String, Object>> iterator= rowList.iterator();
					Here:
						while(iterator.hasNext()) {//非主要输入轮训
							Map<String, Object> row= iterator.next();
							Map<String, Object> rowValue= (Map<String, Object>)row.get(StableShellETL.SHELL_ETL_ROWVALUE);
							Map<String, Object> culumnValue= (Map<String, Object>)rowValue.get(sets[3]);
							//outputTemp
							if(rowValue.containsKey(sets[3])) {
								if(!keyTemp.containsKey(culumnValue.get("culumnValue").toString())) {
									keyTemp.put(culumnValue.get("culumnValue").toString(), "");
									Map<String, Object> rowOutputTempIterator= new HashMap<>(); 
									rowOutputTempIterator.put(StableShellETL.SHELL_ETL_ROWVALUE, rowValue);
									outputTemp.add(rowOutputTempIterator);		
								}
							}
						}
				}
				output.clear();
				output.addAll(outputTemp);
			}
		}

		//设计点 相交
		//PLETL:中节点|进行表格相交|主码为|ID|模式为|新增列;
		//PLETL:中节点|进行表格相交|主码为|ID|模式为|叠加列;
		//PLETL:中节点|进行表格相交|主码为|ID|模式为|有交集叠加列;
		//PLETL:中节点|进行表格相交|主码为|ID|模式为|有交集新增列;
		//PLETL:中节点|进行表格相交|主码为|ID|模式为|无交集新增列;
		if(sets[1].equalsIgnoreCase("进行表格相交")) {
			TinMap mapShell= null;
			String 列标识= null;
			if(sets[0].equalsIgnoreCase("中节点")) {
				mapShell= (TinMap)object.get(StableShellETL.SHELL_ETL_MID_SHELL);
				列标识= "m_";
			}
			if(sets[0].equalsIgnoreCase("下节点")) {
				mapShell= (TinMap)object.get(StableShellETL.SHELL_ETL_DOWN_SHELL);
				列标识= "d_";
			}
			//将上面进行内外循环 颠倒rotation 如下
			if(sets[2].equalsIgnoreCase("主码为")) {//先单一primary key， 之后再设计 forenge key 和 combination key
				//To do。。。初始
				Map<String, Object> tinShellETL= (Map<String, Object>)mapShell.get(StableShellETL.SHELL_ETL_TIN_SHELL_ETL);
				List<Map<String, Object>> rowList= (List<Map<String, Object>>)tinShellETL.get("obj");
				//主循环
				List<Map<String, Object>> 主要输入轮训= (List<Map<String, Object>>)object.get("obj");
				Iterator<Map<String, Object>> outputTempIterator= 主要输入轮训.iterator();
				while(outputTempIterator.hasNext()) {
					Map<String, Object> rowOutputTempIterator= outputTempIterator.next();
					Map<String, Object> rowValueRowOutputTempIterator
					= (Map<String, Object>)rowOutputTempIterator.get(StableShellETL.SHELL_ETL_ROWVALUE);
					boolean findConjunction= false;
					if(0!= rowList.size()) {
						//辅循环
						Iterator<Map<String, Object>> iterator= rowList.iterator();
						while(iterator.hasNext()) {//非主要输入轮训
							Map<String, Object> row= iterator.next();
							Map<String, Object> rowValue= (Map<String, Object>)row.get(StableShellETL.SHELL_ETL_ROWVALUE);
							Map<String, Object> culumnValue= (Map<String, Object>)rowValue.get(sets[3]);
							//outputTemp
							if(rowValueRowOutputTempIterator.containsKey(sets[3])) {
								Map<String, Object> rowValueRowOutputTempIteratorCulumnValue
								= (Map<String, Object>)rowValueRowOutputTempIterator.get(sets[3]);
								//合并rowValueRowOutputTempIteratorCulumnValue 与 culumnValue
								//合并方式，1 叠加列合并 2 新增列合并
								//先实现简单的 新增列合并
								//在执行前进行sets[3]相等检查
								if(rowValueRowOutputTempIteratorCulumnValue.get("culumnValue")
										.equals(culumnValue.get("culumnValue"))) {//以后命令多了优化
									findConjunction= true;
									if(sets[4].equalsIgnoreCase("模式为")) {
										model(sets, rowValue, 列标识, rowValueRowOutputTempIterator);
									}	
								}
								//其他定状补语 函数 
								//。。。
								//。。。
								//。
							}
							rowOutputTempIterator.put(StableShellETL.SHELL_ETL_ROWVALUE, rowValueRowOutputTempIterator);
						}
					}
					if(true== findConjunction) {//有交集的行才保留
						outputTemp.add(rowOutputTempIterator);
					}
				}
			}
			//			if(sets[2].equalsIgnoreCase("自由定义各种命令。。")) {
			//			//To do。。。 
			//		}
			output.clear();
			output.addAll(outputTemp);
		}

		//PLETL:中节点|进行表格剔除|主码为|ID|模式为|相交部分剔除;
		if(sets[1].equalsIgnoreCase("进行表格剔除")) {
			TinMap mapShell= null;
			String 列标识 = null;
			if(sets[0].equalsIgnoreCase("中节点")) {
				mapShell= (TinMap)object.get(StableShellETL.SHELL_ETL_MID_SHELL);
				列标识= "m_";
			}
			if(sets[0].equalsIgnoreCase("下节点")) {
				mapShell= (TinMap)object.get(StableShellETL.SHELL_ETL_DOWN_SHELL);
				列标识= "d_";
			}

			//将上面进行内外循环 颠倒rotation 如下
			if(sets[2].equalsIgnoreCase("主码为")) {//先单一primary key， 之后再设计 forenge key 和 combination key
				//To do。。。初始
				Map<String, Object> tinShellETL= (Map<String, Object>)mapShell.get(StableShellETL.SHELL_ETL_TIN_SHELL_ETL);
				List<Map<String, Object>> rowList= (List<Map<String, Object>>)tinShellETL.get("obj");
				//主循环
				List<Map<String, Object>> 主要输入轮训= (List<Map<String, Object>>)object.get("obj");
				Iterator<Map<String, Object>> outputTempIterator= 主要输入轮训.iterator();
				while(outputTempIterator.hasNext()) {
					Map<String, Object> rowOutputTempIterator= outputTempIterator.next();
					Map<String, Object> rowValueRowOutputTempIterator
					= (Map<String, Object>)rowOutputTempIterator.get(StableShellETL.SHELL_ETL_ROWVALUE);
					boolean findConjunction= false;
					if(0!= rowList.size()) {
						//辅循环
						Iterator<Map<String, Object>> iterator= rowList.iterator();
						while(iterator.hasNext()) {//非主要输入轮训
							Map<String, Object> row= iterator.next();
							Map<String, Object> rowValue= (Map<String, Object>)row.get(StableShellETL.SHELL_ETL_ROWVALUE);
							Map<String, Object> culumnValue= (Map<String, Object>)rowValue.get(sets[3]);
							//outputTemp
							if(rowValueRowOutputTempIterator.containsKey(sets[3])) {
								Map<String, Object> rowValueRowOutputTempIteratorCulumnValue
								= (Map<String, Object>)rowValueRowOutputTempIterator.get(sets[3]);
								//合并rowValueRowOutputTempIteratorCulumnValue 与 culumnValue
								//合并方式，1 叠加列合并 2 新增列合并
								//先实现简单的 新增列合并
								//在执行前进行sets[3]相等检查
								if(rowValueRowOutputTempIteratorCulumnValue.get("culumnValue")
										.equals(culumnValue.get("culumnValue"))) {//以后命令多了优化
									findConjunction= true;
								}
								//其他定状补语 函数 
								//。。。
								//。。。
								//。
							}
							rowOutputTempIterator.put(StableShellETL.SHELL_ETL_ROWVALUE, rowValueRowOutputTempIterator);
						}
					}
					if(false== findConjunction) {//无交集的行才保留
						outputTemp.add(rowOutputTempIterator);
					}
				}
			}
			//			if(sets[2].equalsIgnoreCase("自由定义各种命令。。")) {
			//			//To do。。。 
			//		}
			output.clear();
			output.addAll(outputTemp);
		}
	}

	//之后这个定状补的函数我会分出去 结构化 罗瑶光 20211012
	@SuppressWarnings("unchecked")
	private static void model(String[] sets, Map<String, Object> rowValue, String 列标识
			, Map<String, Object> rowValueRowOutputTempIterator) {

		if(sets[5].equalsIgnoreCase("新增列")) {
			Iterator<String> iteratorCulumnValue= rowValue.keySet().iterator();	
			while(iteratorCulumnValue.hasNext()) {
				String string= iteratorCulumnValue.next();
				Map<String, Object> culumnCell= (Map<String, Object>) rowValue.get(string);
				culumnCell.put(StableShellETL.SHELL_ETL_CULUMNNAME, 列标识+ string);
				rowValueRowOutputTempIterator.put(列标识+ string, culumnCell);
				//先这样，测试下
			}
		}
		//叠加列
		if(sets[5].equalsIgnoreCase("叠加列")) {
			//列遍历
			Iterator<String> iteratorCulumnValue= rowValue.keySet().iterator();	
			while(iteratorCulumnValue.hasNext()) {
				String string= iteratorCulumnValue.next();
				//列操作
				Map<String, Object> culumnCell= (Map<String, Object>) rowValue.get(string);
				if(rowValueRowOutputTempIterator.containsKey(string)) {
					//有就叠加
					Map<String, Object> culumnCellMain
					= (Map<String, Object>) rowValueRowOutputTempIterator.get(string);
					culumnCellMain.put("culumnValue", culumnCellMain.get("culumnValue").toString()
							+ culumnCell.get("culumnValue").toString() );
					rowValueRowOutputTempIterator.put(string, culumnCellMain);
				}else {
					//没有就添加
					culumnCell.put(StableShellETL.SHELL_ETL_CULUMNNAME, 列标识+ string);
					rowValueRowOutputTempIterator.put(列标识+ string, culumnCell);
				}
			}
		}	
		//有交集列 叠加
		if(sets[5].equalsIgnoreCase("有交集叠加列")) {
			//列遍历
			Iterator<String> iteratorCulumnValue= rowValue.keySet().iterator();	
			while(iteratorCulumnValue.hasNext()) {
				String string= iteratorCulumnValue.next();
				//列操作
				Map<String, Object> culumnCell= (Map<String, Object>) rowValue.get(string);
				if(rowValueRowOutputTempIterator.containsKey(string)) {
					//有就叠加
					Map<String, Object> culumnCellMain
					= (Map<String, Object>) rowValueRowOutputTempIterator.get(string);
					culumnCellMain.put("culumnValue", culumnCellMain.get("culumnValue").toString()
							+ culumnCell.get("culumnValue").toString());
					rowValueRowOutputTempIterator.put(string, culumnCellMain);
				}
			}
		}
		//有交集列 新增
		if(sets[5].contains("交集新增列")) {
			//列遍历
			Iterator<String> iteratorCulumnValue= rowValue.keySet().iterator();	
			while(iteratorCulumnValue.hasNext()) {
				String string= iteratorCulumnValue.next();
				//列操作
				Map<String, Object> culumnCell= (Map<String, Object>) rowValue.get(string);
				if(sets[5].equalsIgnoreCase("有交集新增列")) {
					if(rowValueRowOutputTempIterator.containsKey(string)) {
						culumnCell.put(StableShellETL.SHELL_ETL_CULUMNNAME, 列标识+ string);
						rowValueRowOutputTempIterator.put(列标识+ string, culumnCell);
					}
				}else if(sets[5].equalsIgnoreCase("无交集新增列")) {
					if(!rowValueRowOutputTempIterator.containsKey(string)) {
						culumnCell.put(StableShellETL.SHELL_ETL_CULUMNNAME, 列标识+ string);
						rowValueRowOutputTempIterator.put(列标识+ string, culumnCell);
					}
				}	
			}
		}
		//相交部分剔除
	}
}
