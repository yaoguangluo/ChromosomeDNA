Implements of VPCS server notes on Gitee, 2019-06-20.
In an early time of author's projects, MVC backend was a popular solution for
web development. And the first MVP project of IOS game:
https://github.com/yaoguangluo/dark-wizard-game/tree/master/DOW2
, the author appreciated its object oriented schedure and its refreshment. 
Due to the MVC was too heavy, so the author did a definition of game controllers.
And finally separated the macros and prototypes as a type of MVPC. Since the 
author did a Java test job at Folsom Intel, after he used Java mockito MVC API, 
mixed with Junit4 to make a springboot and hibernate test. He found that all
functions could be tested as a single process, and this process contained a 
classify of schedure. These schedure included sinletons, sonar spells, spring
web boots and spring injects. And these schedures were tested one by one like a 
time sequence line-waterflows. So the test process before deployment which was a
synchronization, but the true of its inner schedures were an asynchronization.
The author took more questions about sonar qube registrations because those contained
lots unforeseeably encrypt dlls. The author try to explain well between asynchronization
and synchronization by reading the professional book of Operating System, TCP/IP,
Software Engineering and How to programming. After he did a simulation by using 
CGI, Moonguse C, Rust and Golang etc. Then he got a result of TCP hands shaking
and a time sequenced Rest-calling. He became to know the asynchronization distincts
to a synchronization. Then annouced a first 'VPC' at 
https://github.com/yaoguangluo/VPC5.0/commit/dc06dbc3750879155871d45ce9cdb8be29825a60, 
2017年10月19日 GMT+8 12:15. Because of his VPC project, was built by springboot
and mybatis, which was unforeseeabe. The author couldn't test and catch the question 
well, then try to code a new bottom OSI layer of rest call allocations about his
theory of VPC. He began to think about camel rpc, golang grpc, TCP rxtx hands 
shaking, RS485, powerlink flips and modbus hands shaking. Finally, the author used 
SSH Sockets to simulate the hands shaking CGI. After he had simulated an iluwatar
handler-schedure, he got so many efficiency problems of memory garbage, unused
performs and dead locks. Then he try to make separations of data and logics, schedures
and resource, business and controllers. And now the VPC became a VPCS, VECS of AOPM 
VECS IDUQ TXHF, a part of Deta DNA hexadecimal meta base initons. For the listed bee
cords classify of 'Swarm Computing' at chapter 6 and DNA AOPM-VPCS catalytic
computing-array at chapter 7. The author used socket flows of hands shaking, to 
instead springboot and mybatis, the author did an affordable Deta PLSQL, to
instead MYSQL. and now he prepared to make a new separation of ethics and computings.   


Implements of VPCS server notes on Gitee. 2019-06-25
The author did a contrasted analyst of VPCS, RPC, MVC, MVP, and compared each to Microsoft's
Handler and Event. He did a conclusion of VPCS, from MVC（Model-View-Contoller）to MVP(Model-View-Process), 
then again from an MVPC(Model-View-Process-Controller) to VPCS(View-Process-Controller
Interface- Static Map). At VPC5.0 edition, the author had removed the Model, and separated
Model and Process into sleeper and sets, announced it as VPCS. 
Then The author did an evolution of VPCS, to separate the View into Vison and Pillow, 
gradually into a different type of VPCS (Vision- Pillow-Controller-Sleeper ). Seem not done,
the author continued to integrate the Set into Pillow, and built a skivvy to arrage the 
Pillow set. As a VSPCS( Vision-Sleepers-Pillow-Controller-Skivvy), and now became an HVPCS(
Hallkeeper-Vision-Pillow-Controller-Skivvy) by instead Skivvy of a Hall. For the VPCS HTTP
server and schedure. ( not for DNA Initons Encoding, which was a simple of Vision, Execution,
Controller and Static).

Compare to the Microsoft handler events, VSPCS schedure and its RR(Round Robin or Early Birds)
could be more simpler then other factory modes. Compare to the RPC, VSPCS simulated the concurrented,
asyntronized, inner time sequenced threads-schedure( see HTTP request and responce Java sources),
instead of illuwatars incremented, asyntronized handler and event. Golang RPC refers (
https://blog. csdn. net/lk2684753/article/details/84436190). VSPCS did an example of Hotel-Daily-Arrangement.
Because of 3 messy environments as Hotel-Daily-Arrangement, Hospital-Daily-Arrangement,
and Bus-Stations-Daily-Arrangement. The author considered it could do well in a business of catalytic 
computings. In order to satisfy a reduced computings and wastes, and raised a seamlessly monitoring. 
The author thanked Operating System, Apache Camel and Its Mini OSGI, Java.net, Java How to Program 6th,
Liferay and Its theme system here the Cheers.

In an early time, the motivation of created a VPCS server, the author did a problem of
his VPC open source project, based on Angular, Mybatis and Springboot, because he coudn't 
make an inner break-points to do sequence-debugging at that platform. Because all of the
Angular, Mybatis and Springboot, were open sources APIs, which were boned and encrypted by
DLLs. The author feed so hard to make an efficiency test by only a few fatal logs, tries
and catches. Took this problem, he did a plain to build a new TCP/IP web server by using
his VPC schedure-method. His purpose was too simple, meant only a fully try catchment of
his all of the source code. Seem crazy but successful, now a VPCS became an important part
of DNA hexadecimal encodings, AOPM VECS IDUQ TXHF -> DCPE THOS MAXF VIUQ.

Before this VPCS creatives, the author did a well job of Alfresco and its surf distributions, 
and 32feet at 2009. And a powerlink and modbus protocol at 2010. And a Liferay-theme and 
md5 CRC circuit, read HTTP cgi by using C at 2012, Camel RPC deployment at 2013. Do note
on Golang martini RPC and Angular 1.2 for Kiyor.Cai at 2015, Chinache. Java Jboss EAP, JDK
third party caches at 2016, Yamibuy, PHP laravel MVC at 2017, 117book. NodeJS, angular 1.2, spring
boot and hibernate at 2017, Intel. and referred Roy Thomas Fielding of his Restful.


Author YaoguangLuo, 稍后优化语法.     
