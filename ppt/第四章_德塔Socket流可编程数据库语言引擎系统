第四章 德塔 Socket 流可编程数据库语言引擎系统

**********************************************************************
因为没时间做web工程，用户注意下，loseCount进行sleeper清理，因为skivvy后面是system.gc,所以只要new 新的map即可，clear会有问题。
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	int loseCount= 0;
		while(true){
			if(sleeperHall.getThreadsCount()< 200){
				Sleeper sleeper= new Sleeper();
				sleeper.hugPillow(sleeperHall, server.accept(), sleeper.hashCode());
				sleeper.start();
				loseCount= 0; 
			}
			loseCount+= 1; 
			if(loseCount> 70) {
				haoHiYooFaker(sleeperHall);
			}
			//System.out.println(sleeperHall.getThreadsCount());
		}
*************************************************************************
public void callSkivvy() {
		sleepersMap= new ConcurrentHashMap<>();
		//sleepersMap.clear();
		System.gc();
	}

*************************************************************************
Socket rest TCP握手协议，
1 德塔数据库的 admin界面采用 web页进行配置操作。
refer page 376

2 web页配置操作采用TCP握手访问模式，基于socket的http请求握手。
refer page 464~

3 德塔数据库将socket握手进行线程封装，然后多线程组织页面。
refer page 392，

4 封装和组织页面设计过程逐步进行优化形成VPCS后端管理体系。
refer page 383,476


文件数据库，
1 德塔数据库的数据存储是一种文件存储模式。
refer page 408,409,469,473

2 文件的读写进行子集，行，表，映射，表头，按1范式分类。
refer page 375,434,

3 数据库的数据读写支持加密。
refer page 见元基加密

4 每一个文件不但有物理空间，还有相应的内存空间。
refer page 375

VPCS服务器，

关于vpcs应用逻辑介绍文字描述
1 作者使用Json api进行数据的载体封装。2 线程池和线程用hallkeeper和sleeper标识。
3 分发的VPC forward 处理用静态map，目的是索引web的http IP endpoint地址映射。
4函数操作可静态，可new，使用者可多种源码风格自由扩展。5 注销和运维机制的线程可以
通过hallkeeper来分配 skivvy来管理。6 处理http的response反馈含有buffer，zip，
stream等多种格式封装，支持W3C 定义的格式文件反馈，如就jpg，html，js，wav，
这些文件打开一次便缓存记录，方便计算加速。

VPCS的执行流程为 1启动VPCS服务器，2然后开启socket线程池，线程的形式为socket accept
进行等待http访问请求握手，一旦握手成功便进行forward分发VPC 执行功能函数处理，如 
登陆认证函数，数据操作函数，缓存接口函数，业务后端逻辑函数等等。 执行结果进行Json封装
然后基于http协议 feedback 和response反馈。最后使用完的socket 线程进行注销，释放计算
内存资源。因为socket是一个线程，所以这整个过程和socket accept 是异步消息模式，互不干扰
，于是socket accpet一直在循环等待http的握手请求。

描述人 罗瑶光


1 VPCS服务器支持每秒400万QPS的web请求。
refer page 389,

2 VPCS服务器采用TCP rest request模式，标准化http response。
refer page 388,395

3 VPCS服务器可自由设计前端和后端集成。
refer page 见德塔官网 和 养料经admin 两个实例

4 VPCS服务器完全支持post 个 get 2种请求模式，可扩展。
refer page 481,488


VPCS调度架构，
1 VPCS服务器包含 视觉模块，处理模块，控制模块，资源模块。
refer page 396,394,392,383

2 每一种模块有各自的名称标识 和 内存标识，方便精确查找。
refer page 492,493,

3 VPCS服务器包含执行者-生产者-造梦者-sleeper，管理者-分配者-登记者-HallKeeper，运维者-服务员-清洁员-skivvy 3个模式
refer page 392,394,

4 支持控制与执行分离，线程与资源分离。
refer page 385~389,486,490,492

作者最早设计 VPCS 服务器的动机，是为了弥补VPC的计算过程观测困难的问题。因为作者设计的VPC
是采用springboot + mybatis的结构，底层全是是开源插件的封装，很多核心源码又不能调试
仅仅通过几个log和 trycatch给作者带来了无形的压力，于是有计划从无到有进行设计一个TCP/IP
的 SOCKET 协议做服务器HTTP请求。作者当时没有想到，一个这样的小动机给带来了丰厚的回报，
VPCS 目前成为了 DNA 元基映射编码算子 的核心组成部分。

PLSQL语言，
1 德塔PLSQL语言是一种从上到下的脚本执行语言。
refer page 377,

2 德塔PLSQL语言包含常用增删改查命令。
refer page 406~409,471,1035

3 德塔PLSQL语言支持join和 aggregation 高级操作。
refer page 419,431,435,438,447

4 德塔PLSQL语言行 可批处理，可拆分。
refer page 1035~1041 将例子写入main，class编译，然后 bash boot class 即可。 还可以bash 定时批处理。


PLSQL编译机，
1 德塔PLSQL编译机 用于理解和执行 德塔PLSQL语言
refer page 413,414

2 德塔PLSQL编译机 包含常见脚本命令计算算子如 条件算子，比较算子，包含算子，离散算子
refer page 419

3 德塔PLSQL编译机 采用map进行的内部中间数据缓存
refer page 431,432~


PLORM语言，
1 德塔PLORM语言 用于 德塔PLSQL语言进行函数封装。
refer page 1003~

2 德塔PLORM语言 有先后顺序，需要遵循 德塔PLSQL语言语法。
refer page 1019~

3 德塔PLORM语言 对比 德塔PLSQL语言 用于一些不需要配置的nosql的场景，类似 hibernate 对比 ibatis。
refer page 1019~

4 VS hibernate 对比 ibatis的不同，德塔PLORM语言 另外也是 德塔PLSQL的上层语言。
refer page 1019~

德塔的PLORM 和 PLSQL 的引擎出现，作者开始有信心将其优化成 节点执行的命令行脚本模式，于是之后的TinShell
和 PLTinShell， PLETL Shell 诞生了。这个PLETL体系弥补了 当前世界按语言理解方式来模拟神经组织计算的映射空白。

灾后重建，
1 德塔数据库包含logbin 系统。
refer page 398,

2 德塔数据库包含logbin 系统基于单个写操作进行log保存 并行加密成文件。
refer page 399

3 单个写操作用时间戳作和写增量序列进行对应标识，避免混乱。
refer page 399

4 德塔数据库包含logbin 系统 并支持热备和错误写 实时rollback 检测。 
refer page 398

德塔的logbin系统，一开始是设计在try catch 中，因为德塔数据库融合了cache 和 DMA两种存储系统，于是，
作者将logbin 的 rollback进行先内存模拟执行写操作，成功后再执行物理写操作，并记录操作日志。如物理写操作还失败，
就rollback 到上次写请求。这种 3步logbin机制，作者认为 高安全性。

应用


章节的著作权文件列表：

1.罗瑶光. 《德塔 Socket流可编程数据库语言引擎系统 V1.0.0》. 中华人民共和国国家版权局，软著登字第4317518号. 2019.
2.罗瑶光，罗荣武. 《类人DNA与 神经元基于催化算子映射编码方式 V_1.2.2》. 中华人民共和国国家版权局，国作登字-2021-A-00097017. 2021.
3.罗瑶光，罗荣武. 《DNA元基催化与肽计算第二卷养疗经应用研究20210305》. 中华人民共和国国家版权局，国作登字-2021-L-00103660. 2021.
4.罗瑶光，罗荣武. 《DNA 元基催化与肽计算 第三修订版V039010912》. 中华人民共和国国家版权局，国作登字-2021-L-00268255. 2021.        
5.类人数据生命的DNA计算思想 Github [引用日期2020-03-05] https://github.com/yaoguangluo/Deta_Resource
6.罗瑶光，罗荣武. 《DNA元基催化与肽计算 第四修订版 V00919》. 中华人民共和国国家版权局，SD-2022Z11L0025809. 2022.


罗瑶光



Gitee 20190620 感想：关于vpcs的描述：最早我的项目都是基于大众化MVC结构, 这个结构陪伴我5年的时间.   第一次使用mvp是我在设计io
s的暗夜法师游戏设计时候要进行对象数据小规模刷新机制, mvc太重了, 我开始将CONTROLLER 细化.   我的结构开始走向mvpc模式.   当时
感觉是不错的, 后来在用spring mvc的时候, 普遍是IOC的mvpc设计进行自动注册封装, 一次我在进行mock mvc测试的时候 偶尔一个细节打动
了我, 就是我看到的并发是个假象, 只是个list的先行注册分解而已, 我后来在用spring boot, thinkphp, laravel, zend 等框架的技术,
我这个问题重复了100遍在脑海里, 是什么封装驱动这个注册分解模式？于是我开始用c moonguse来做线性服务器, 并模拟了, rust, golang
等编译型注册原理, 我找到了实质, 那就是tcp握手规则, 我开始设计tcp rxtx进行数据交换, 设计了VPC结构, 发现一个大问题就是数据没
有格式化, 于是我开始寻求一种在多线程线性服务器运算握手的时候能够带数据交换的一种常用格式（稳定的）的进行业务, 多好？我找到
了就是socket 套接字.  于是我将socket进行 服务器部署, 将文件数据, 脚本数据, rest接口数据, 动态数据, 等进行一个个函数封装, 
然后将函数的数据和socket线程分离, 便于运维, 测试, 数据计算浪费管理, 这就是vpcs第一版本.  特点就是数据与逻辑分离, 线程与资
源分离, 业务与控制分离, 之后蜂群计算阵列, 非常方便我的initon DNA 催化布局.  vpcs第二个版本是我在尝试用springboot mybatis 
布局的时候, 发现局部注册太臃肿了, 当时设计vpc5. 0的时候我迫切准备淘汰springboot, 用自己的socket流来取代, 我就没多想直接做
了, 发现我成功了, 于是我开始设计第三代vpcs版本, 将v p c s 四个部分进行全面的map注册模式, 我当时想到的好处是 1 以后map reduce
非常方便, 2 全部量子碎片化, 速度性能要爆炸, 3碎片逻辑进行微分催化1对1 initon mask进行肽链重用, dna的早期框架我有足够条件进
行论证, 现在vpcs进入第4代了, 我开始考虑情感化线程操作.  我一直在准备着.  让情感与计算分离.  

Gitee 20190625 感想：我花时间进行论证vpcs 和 rpc, mvc, mvp, 微软的handler event 优势和差异性对比.   
vpcs定义：是标准的从mvc（model-view-contoller）到mvp(model-view-process)到mvpc(model-view-process-controller)
到vpcs(view-process-controller interface- static map)的一个过程.   vpc 在第5版本时候, 作者将model去掉了, 将
process分成 sleeper 和 sets , 正式命名vpcs
第二版vpcs 作者将view 拆分为 vision 和 pillow, 逐渐形成 vision- pillow-controller-sleeper 的vpcs结构 第三版
vpcs 作者将 set 保存在pillow中 让sleeper线程和pillow分开 让skivvy来管理, 逐渐形成 vision-sleepers- pillow-controller-skivvy 
的vspcs结构 做到逻辑与任务分开, 线程与资源分开的模式.  
vpcs随着工程的发展已经进化到了 HVPCS (hallkeeper-vision-pillow-controller-sleeper) (运行与维护分离, 执行与逻辑分离, 
任务与资源分离) 作者告诉大家小秘密, Hall的词汇来自作者在路德认识 留学生服务的Hall教授.  
1 对比微软的handler events 优势：vspcs更实用于让大型综合调度瞬间简化, 因为本身就包含了RR机制思想.   2 对比web的rpc 
优势：rpc大家可以看下illuwatar的包 和 go的rpc 异步消息机制, vspcs的机制是通过触发来运行逻辑http 协议是socket流进行rest, 
bits等处理（类似的功能软件是redis ）, 3 而rpc是 tcp连接当然连接速度会更快, refer go 的最新 grpc https://blog. csdn. 
net/lk2684753/article/details/84436190 这个机制比较不错, 作者给个赞.   4 illuwatar rpc 是微软c#的handler events线
程注册机制的java 注册封装模式, 是时时动态的, 计算量增大.   5 vspcs 采用酒店的服务管理思想进行程序化, （作者其实一
开始想用医院业务调度思想, 作者天性怕见血, 最后打消念头了, 不好意思哈.  ）这是世界第一篇关于酒店业务调度思想的软件
论文.  作者设计和更新它的需求的直接动机是为了方便日后进行海量并发的VPCS矩阵蜂群计算中满足 低计算量, 低浪费量, 无监
控死角的微分催化计算业务.  
作者再加点addition： Apache Camel, 作者在几年前用这个包做异步消息, 当时文档太少, 语法用错了, 把请求业务做成了循环
执行进行, 作者灵感来了, 干脆自己用rxtx进行握手自己重新写一个, 2天后, 作者打消了念头, 因为波特率都没有处理, 自己为
了一个消息业务把自己当特工在搞, 心好累, , 于是干脆用套接字吧, 作者refer 2本书 1 java. net白皮书 2 java how to program 6th 
蓝皮书 开始用socket做握手发送数据包, 发现速度不错.  再加点料, 为什么作者会接触camel, 作者在加州路德大学读书的时候有一次在
计算科学实验室做嵌入式OSGI思想研究的时候, 在谷歌上推荐弹出了个camel, 这是作者第一次看到它.  关于作者ETL unicorn的 OSGI思想
灵感动机来自 liferay的theme控件, 不是camel, 在这里申明下, 因为作者的动机是要走节点图形的继承, 而不是插件化OSGI包.  关于作
者的 ETL unicorn的 OSGI 函数更严格来讲不是OSGI, 而是继承的子类对象们进行统一分类管理而已.  

Gitee 20190826 感想 为什么我不用spring？很多年前, 很多人带着各种各样的问题问我为什么Java spring 那么好了, 为什么 我要另创
socket流分发服务器？我可以告诉大家的动机. 
1：安全和同源配置问题.  2016年我在美国注册了comforx软件公司, 当时设计个电商系统, 因为我用的是spring后端, 我发现一个大问题
, 为什么被同源限制, 如果是拒绝恶意攻击, 至少可以用户自定义设置配置呀, 而这个功能一直被spring给控制了, 当时我郁闷的用2台电
脑和2个不同的公网域名IP才解决的这个问题.  我的动机很明确, 我要自己写web服务器.  
2：市场的开源产品大, 重.  spring 我觉得太大了.   2015年我在亚米上班的时候竟然听见吴迪和little说java太重了(little想用C),
太重了, 内存, 什么的太大了, 我当时候在想, 可以用spring boot 或者golang 呀, 我当时给王浩雷推荐了go lang, 王浩雷说 go lang 
当时生态系统不全, 做工程没有java 安全和高效, 特别是开发周期.  
3：方便我的vpcs实验论证.   最早接触socket是在印度那本java how to program 6th, 第一次使用socket 是在上海章总那, 做 C# 蓝
牙 大文件传输, 用到了32feet, 当时我问章总, 为什么我的软件智能一台一台手机单独发送, 不能群发, 章总给我一个别人的C#软件(2012
年那个硬盘我在美国Del Ma AVE "弄丢"了, 记得QQ(313699483)里面有我和爸妈聊天的记录), 说这个别人实现了你看看多线程的原理, 我
说多线程我知道, 于是我专门独自写了个多线程哲学家进餐算法, 章总当时之后没说话, 我后来（2014年）意识了, 不是多线程的问题, 
是我的握手没有并发管理.  这个socket并发握手, 我特意做了个sleeper Hall 来管理.  以及后来的 VPCS论文.  
4：统一, 全局, 生态化, 高效.   小到极致, 我的数据库不仅用socket流, 我的缓存, 前端, 后端都是采用我的socket流, 现在我一
台电脑启动整个前端, 后端, 缓存, 和数据库, 4个工程, 2兆内存, 全部搞定.  
5：http协议成熟.   为什么我不用rxtx, 我之前已经解释了, 因为rxtx的数据还是原始数据, 协议太低了, 对我的工程设计研发周期变大, 
所以我采用http socket流模式.  
之前我还遇到了些问题, 比如jar, zip, wav, mp4, js, 等文件怎么分发？rest是最好分发的, 因为就是http而已, 可以js 就不一样了, 
有 application js, 还有file js, 记得几个月前我一直苦恼 application js的分发, 后来我设计了 unzipped buffer 等格式, 
针对不同的web 对象数据全部搞定的时候, 我发现我的socket服务器源码 核心代码 40kb都不到, 哪有spring 100兆 , spring mvc 
17兆, spring boot 40兆等那么大, 关于我的socket基础怎么来的？感谢三本书 3堂课： 《java how to program 6th 蓝皮子印度买的》
《java net白皮子 美国工业城市frys买的》《c cgi 路德图书馆 》/ 路德大学的计算机网络, 炮兵学院的通信原理, 基督大学的
数据结构, 操作系统.  而真正给予我能力的是罗希尼老师数据结构课程.  这些书我之前带美国去了, 去年就披了件大衣回国, 书没有带回来.  
还有, 关于一些零散的记忆累计, 我也需要感激的：
1在chinacache的时候管理互联网ip认证项目, 我非常系统的接触了tcp握手的协议码解释.  
2在路德大学上香港老师的计算机网络数据编码课非常系统的接触较验机制和TCP编码原理.  
3我在2个大学中系统的学习了2次操作系统专业课程.  
4我在上海电气接触过power link的tcp 以太帧.  
5感谢w3c, web2. 0, http协议官网给我提供了常用文件的 header头 定义规范.  
6分发压缩我要感谢gzip, 我的socket数据库引擎系统个人软著不包括gzip压缩, 说到压缩, 用处是真的很大.  因为它让我的
握手时间和效率大大增加了.  
最早我没有用到压缩的, 因为服务器是花生壳转发, 所以我握手比直接服务器发布慢了一点, 而且走别人的分发代理, 格式还
要被强制统一, 我前几个月为了这个问题头疼了几天, 后来用gzip统一压缩大文件, 10兆变2兆, 格式保障了, 速度也上来了. 
小伙伴如果不想用gzip, 可以剔除掉, 记得把forwadtype里面分流的函数修改下就行了.  

